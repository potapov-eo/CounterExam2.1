{"version":3,"sources":["ButtonComponent.tsx","Display.tsx","Counter.tsx","Input.tsx","SetValueForCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonComponent","props","classButton","dis","className","disabled","onClick","changeCount","title","Display","error","count","maxCount","Counter","useState","minCount","setCount","disInt","disReset","id","changeShowCountInit","Input","classInput","errorInput","onChange","e","changTimeMinValue","currentTarget","value","type","SetValueForCounter","timeMinValue","setTimeMinValue","timeMaxValue","setTimeMaxValue","setErrorInput","disSet","setDisSet","newCount","changeCountInitState","App","setMaxCount","setMinCount","showCounter","setShowCounter","x","timeMaxCount","timeMinCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAWO,SAASA,EAAgBC,GAE5B,IAAIC,EAAcD,EAAME,IAAM,iBAAmB,SAEjD,OAAO,wBAAQC,UAAWF,EAAaG,SAAUJ,EAAME,IAAKG,QAASL,EAAMM,YAApE,SAAkFN,EAAMO,QCP5F,SAASC,EAAQR,GACpB,IAAMS,EAAQT,EAAMU,QAAUV,EAAMW,SAAW,QAAU,UAEzD,OAAO,qBAAKR,UAAWM,EAAhB,SAAwBT,EAAMU,QC6D1BE,MA5Df,SAAiBZ,GAA0B,IAAD,EACda,mBAAiBb,EAAMc,UADT,mBACjCJ,EADiC,KAC1BK,EAD0B,KAElCC,EAAUN,IAAUV,EAAMW,SAC1BM,EAAYP,IAAUV,EAAMc,SAchC,OAPIJ,EAAQV,EAAMc,UACdC,EAASf,EAAMc,UAOf,8BACI,qBAAKX,UAAU,MAAf,SAEI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,UAAf,SACI,cAACK,EAAD,CAASE,MAAOA,EAAOC,SAAUX,EAAMW,aAG3C,sBAAKR,UAAU,gBAAf,UACI,cAACJ,EAAD,CACIG,IAAKc,EACLE,GAAI,EACJR,MAAOA,EACPH,MAAO,MACPD,YA5BN,WACVI,EAAQV,EAAMW,UACdI,EAASL,EAAQ,MA6BL,cAACX,EAAD,CACImB,GAAI,EACJR,MAAOA,EACPH,MAAO,QACPD,YA1BP,kBAAMS,EAASf,EAAMc,WA2BdZ,IAAKe,IAIT,cAAClB,EAAD,CACIG,KAAK,EACLgB,GAAI,EACJX,MAAO,MACPD,YAlCE,kBAAMN,EAAMmB,qBAAoB,iBClBvD,SAASC,EAAMpB,GAClB,IAGIqB,EAAarB,EAAMsB,WAAa,QAAU,cAC9C,OACI,uBAAOC,SALa,SAACC,GACrBxB,EAAMyB,mBAAmBD,EAAEE,cAAcC,QAIPC,KAAM,SAAUzB,UAAWkB,EAAYM,MAAO3B,EAAM2B,QCgE/EE,MAlEf,SAA4B7B,GAAqC,IAAD,EACpBa,mBAAiBb,EAAMc,UADH,mBACrDgB,EADqD,KACvCC,EADuC,OAEpBlB,mBAAiBb,EAAMW,UAFH,mBAErDqB,EAFqD,KAEvCC,EAFuC,OAGxBpB,oBAAkB,GAHM,mBAGrDS,EAHqD,KAGzCY,EAHyC,OAIhCrB,oBAAkB,GAJc,mBAIrDsB,EAJqD,KAI7CC,EAJ6C,KA4B5D,OACI,qBAAKjC,UAAU,MAAf,SACI,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,cAAf,UACI,6CACA,+BACQ,cAACiB,EAAD,CAAOE,WAAYA,EACZG,kBA/BX,SAACY,GAChBA,EAAW,GAAOA,GAAYL,GAC/BE,GAAc,GACdE,GAAU,KAEVF,GAAc,GACdE,GAAU,IAEdL,EAAgBM,IAwBeV,MAAOG,SAG1B,gCACI,6CACA,+BACQ,cAACV,EAAD,CAAOE,WAAYA,EACZG,kBA7BX,SAACY,GACrBJ,EAAgBI,GACZA,GAAYP,GACZI,GAAc,GACdE,GAAU,KAEVF,GAAc,GACdE,GAAU,KAuBiBT,MAAOK,YAK9B,qBAAK7B,UAAU,gBAAf,SACI,cAACJ,EAAD,CACIG,IAAKiC,EACLjB,GAAI,EACJX,MAAO,MACPD,YA9BI,WACpBN,EAAMsC,qBAAqBN,EAAcF,cCElCS,MAlCf,WAAgB,IAAD,EAEqB1B,mBAAiB,IAFtC,mBAEJF,EAFI,KAEM6B,EAFN,OAGqB3B,mBAAiB,GAHtC,mBAGJC,EAHI,KAGM2B,EAHN,OAI2B5B,oBAAkB,GAJ7C,mBAIJ6B,EAJI,KAISC,EAJT,KAcX,OACI,gCACI,sDACwB7B,KAExB,sDACwBH,KAEvB+B,EAAc,cAAC,EAAD,CAAS5B,SAAUA,EACVH,SAAUA,EACVQ,oBAbN,SAACyB,GACvBD,EAAeC,MAcL,cAAC,EAAD,CAAoB9B,SAAUA,EACVH,SAAUA,EACV2B,qBAtBP,SAACO,EAAsBC,GAC9CN,EAAYK,GACZJ,EAAYK,GACZH,GAAe,UCDRI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1019c593.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ButtonComponentType = {\r\n    id: number\r\n    count?: number\r\n    title: string\r\n    changeCount: () => void\r\n    dis: boolean\r\n\r\n}\r\n\r\nexport function ButtonComponent(props: ButtonComponentType) {\r\n\r\n    let classButton = props.dis ? \"buttonDisabled\" : \"button\"\r\n\r\n    return <button className={classButton} disabled={props.dis} onClick={props.changeCount}>{props.title}</button>\r\n}\r\n","import React from 'react';\r\n\r\ntype DisplayType = {\r\n    count: number\r\n    maxCount: number\r\n\r\n}\r\n\r\nexport function Display(props: DisplayType) {\r\n    const error = props.count === props.maxCount ? \"error\" : \"display\"\r\n\r\n    return <div className={error}>{props.count}</div>\r\n\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {ButtonComponent} from \"./ButtonComponent\";\nimport {Display} from \"./Display\";\n\ntype CounterPropsType = {\n    minCount: number\n    maxCount: number\n    changeShowCountInit: (x: boolean) => void\n\n}\n\nfunction Counter(props: CounterPropsType) {\n    let [count, setCount] = useState<number>(props.minCount)\n    let disInt = (count === props.maxCount)\n    let disReset = (count === props.minCount)\n    let changeCount = () => {\n        if (count < props.maxCount) {\n            setCount(count + 1)\n        }\n\n    }\n    if (count < props.minCount) {\n        setCount(props.minCount)\n    }\n    let resetCount = () => setCount(props.minCount)\n    let changeShowCountInit = () => props.changeShowCountInit(false)\n\n\n    return (\n        <div>\n            <div className=\"App\">\n\n                <div className=\"Counter\">\n                    <div className=\"Display\">\n                        <Display count={count} maxCount={props.maxCount}/>\n\n                    </div>\n                    <div className=\"displayButton\">\n                        <ButtonComponent\n                            dis={disInt}\n                            id={1}\n                            count={count}\n                            title={\"INT\"}\n                            changeCount={changeCount}\n\n                        />\n                        <ButtonComponent\n                            id={2}\n                            count={count}\n                            title={\"RESET\"}\n                            changeCount={resetCount}\n                            dis={disReset}\n\n                        />\n\n                        <ButtonComponent\n                            dis={false}\n                            id={3}\n                            title={\"SET\"}\n                            changeCount={changeShowCountInit}\n\n                        />\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {ChangeEvent, useState} from 'react';\n\ntype InputPropsType = {\n    changTimeMinValue: (newMinCount: number) => void\n    errorInput: boolean\n    value: number\n}\n\nexport function Input(props: InputPropsType) {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changTimeMinValue(+e.currentTarget.value)\n    }\n    let classInput = props.errorInput ? \"input\" : \"input-error\"\n    return (\n        <input onChange={onChangeHandler} type={\"number\"} className={classInput} value={props.value}/>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport {ButtonComponent} from \"./ButtonComponent\";\nimport {Input} from \"./Input\";\n\ntype SetValueForCounterPropsType = {\n    minCount: number\n    maxCount: number\n    changeCountInitState: (timeMaxCount: number, timeMinCount: number) => void\n\n}\n\nfunction SetValueForCounter(props: SetValueForCounterPropsType) {\n    const [timeMinValue, setTimeMinValue] = useState<number>(props.minCount)\n    const [timeMaxValue, setTimeMaxValue] = useState<number>(props.maxCount)\n    const [errorInput, setErrorInput] = useState<boolean>(true)\n    const [disSet, setDisSet] = useState<boolean>(false)\n    let changTimeMinValue = (newCount: number) => {\n        if ((newCount < 0) || (newCount >= timeMaxValue)) {\n            setErrorInput(false)\n            setDisSet(true)\n        } else {\n            setErrorInput(true)\n            setDisSet(false)\n        }\n        setTimeMinValue(newCount)\n    }\n    let changTimeMaxValue = (newCount: number) => {\n        setTimeMaxValue(newCount)\n        if (newCount <= timeMinValue) {\n            setErrorInput(false)\n            setDisSet(true)\n        } else {\n            setErrorInput(true)\n            setDisSet(false)\n        }\n    }\n    const changeCountInit = () => {\n        props.changeCountInitState(timeMaxValue, timeMinValue)\n    }\n    return (\n        <div className=\"App\">\n            <div className=\"Counter\">\n                <div className=\"display2\">\n                    <div className=\"input-field\">\n                        <span>min value</span>\n                        <span>\n                                <Input errorInput={errorInput}\n                                       changTimeMinValue={changTimeMinValue}\n                                       value={timeMinValue}/>\n                            </span>\n                    </div>\n                    <div>\n                        <span>max value</span>\n                        <span>\n                                <Input errorInput={errorInput}\n                                       changTimeMinValue={changTimeMaxValue}\n                                       value={timeMaxValue}/>\n                            </span>\n                    </div>\n\n                </div>\n                <div className=\"displayButton\">\n                    <ButtonComponent\n                        dis={disSet}\n                        id={3}\n                        title={\"SET\"}\n                        changeCount={changeCountInit}\n\n                    />\n\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default SetValueForCounter;\n","import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nimport Counter from \"./Counter\";\r\nimport SetValueForCounter from \"./SetValueForCounter\";\r\n\r\nfunction App() {\r\n\r\n    const [maxCount, setMaxCount] = useState<number>(10)\r\n    const [minCount, setMinCount] = useState<number>(5)\r\n    const [showCounter, setShowCounter] = useState<boolean>(false)\r\n\r\n    let changeCountInitState = (timeMaxCount: number, timeMinCount: number) => {\r\n        setMaxCount(timeMaxCount)\r\n        setMinCount(timeMinCount)\r\n        setShowCounter(true)\r\n    }\r\n    let changeShowCountInit = (x: boolean) => {\r\n        setShowCounter(x)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                current minValue = {minCount}\r\n            </div>\r\n            <div>\r\n                current maxValue = {maxCount}\r\n            </div>\r\n            {showCounter ? <Counter minCount={minCount}\r\n                                    maxCount={maxCount}\r\n                                    changeShowCountInit={changeShowCountInit}/>\r\n\r\n                : <SetValueForCounter minCount={minCount}\r\n                                      maxCount={maxCount}\r\n                                      changeCountInitState={changeCountInitState}\r\n\r\n                />}\r\n        </div>\r\n    )\r\n}\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}